<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--配置springMVC-->
    <!--1：开启springMVC注解模式
        简化配置：（1）自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandleradapter
        (2)提供一系列操作：数据绑定，数字和日期的转换 format @NumberFormat，@DataTimeFormat,xml,json默认读写支持
    -->
    <mvc:annotation-driven/>
    <!--2:servlet-mapping映射路径：“/”-->
    <!--静态资源默认servlet配置 1：加入对静态资源的处理：js,gif,png  2:允许使用“/”做整体映射
    -->
    <!-- 对静态资源文件的访问  方案一 （二选一） -->
    <mvc:default-servlet-handler/>

    <!-- 对静态资源文件的访问  方案二 （二选一）-->
    <!--<mvc:resources mapping="/img/**" location="/WEB-INF/img/" /> &lt;!&ndash;cache-period="31556926"&ndash;&gt;-->
    <!--<mvc:resources mapping="/js/**" location="/WEB-INF/js/" />&lt;!&ndash;cache-period="31556926"&ndash;&gt;-->
    <mvc:resources mapping="/plugIn_web/**" location="/WEB-INF/plugIn_web/" /><!--cache-period="31556926"-->
    <!--<mvc:resources mapping="/html/**" location="/WEB-INF/html/" />-->
    <!--3:配置jsp 显示ViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--4:扫描web相关的bean-->
    <context:component-scan base-package="com.taoyb.simon"/>
    <!--使Spring支持自动检测组件，如注解的Controller-->
    <context:component-scan base-package="com.activiti.workflow" use-default-filters="true">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--<import resource="../errorInfo.xml" />-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**/*"/>
            <mvc:exclude-mapping path="/**/*.css"/>
            <mvc:exclude-mapping path="/**/*.js"/>
            <mvc:exclude-mapping path="/**/*.png"/>
            <mvc:exclude-mapping path="/**/*.gif"/>
            <mvc:exclude-mapping path="/**/*.jpg"/>
            <mvc:exclude-mapping path="/**/*.jpeg"/>
            <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
            <bean class="com.taoyb.simon.common.interceptor.AuthInterceptor"/>
        </mvc:interceptor>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
    </mvc:interceptors>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据库的连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置基于注解的声明式事务 默认使用注解来管理事务行为-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
    <bean class="com.taoyb.simon.common.SpringContextHolder" lazy-init="false" />

</beans>